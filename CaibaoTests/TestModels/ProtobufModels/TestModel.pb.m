// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TestModel.pb.h"
// @@protoc_insertion_point(imports)

@implementation TestModelRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TestModelRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Tests ()
@property (strong) NSString* name;
@property UInt32 age;
@property (strong) NSMutableArray * testArray;
@property (strong) NSMutableArray * test3GArray;
@property (strong) NSMutableArray * test3GsArray;
@property (strong) NSMutableArray * test4Array;
@property (strong) NSMutableArray * test4SArray;
@property (strong) NSMutableArray * test5Array;
@property (strong) NSMutableArray * test5S5CArray;
@end

@implementation Tests

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) value_ {
  hasAge_ = !!value_;
}
@synthesize age;
@synthesize testArray;
@dynamic test;
@synthesize test3GArray;
@dynamic test3G;
@synthesize test3GsArray;
@dynamic test3Gs;
@synthesize test4Array;
@dynamic test4;
@synthesize test4SArray;
@dynamic test4S;
@synthesize test5Array;
@dynamic test5;
@synthesize test5S5CArray;
@dynamic test5S5C;
- (void) dealloc {
  self.name = nil;
  self.testArray = nil;
  self.test3GArray = nil;
  self.test3GsArray = nil;
  self.test4Array = nil;
  self.test4SArray = nil;
  self.test5Array = nil;
  self.test5S5CArray = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.age = 0;
  }
  return self;
}
static Tests* defaultTestsInstance = nil;
+ (void) initialize {
  if (self == [Tests class]) {
    defaultTestsInstance = [[Tests alloc] init];
  }
}
+ (Tests*) defaultInstance {
  return defaultTestsInstance;
}
- (Tests*) defaultInstance {
  return defaultTestsInstance;
}
- (NSArray *)test {
  return testArray;
}
- (TestsTest*)testAtIndex:(NSUInteger)index {
  return [testArray objectAtIndex:index];
}
- (NSArray *)test3G {
  return test3GArray;
}
- (TestsTest3G*)test3GAtIndex:(NSUInteger)index {
  return [test3GArray objectAtIndex:index];
}
- (NSArray *)test3Gs {
  return test3GsArray;
}
- (TestsTest3GS*)test3GsAtIndex:(NSUInteger)index {
  return [test3GsArray objectAtIndex:index];
}
- (NSArray *)test4 {
  return test4Array;
}
- (TestsTest4*)test4AtIndex:(NSUInteger)index {
  return [test4Array objectAtIndex:index];
}
- (NSArray *)test4S {
  return test4SArray;
}
- (TestsTest4S*)test4SAtIndex:(NSUInteger)index {
  return [test4SArray objectAtIndex:index];
}
- (NSArray *)test5 {
  return test5Array;
}
- (TestsTest5*)test5AtIndex:(NSUInteger)index {
  return [test5Array objectAtIndex:index];
}
- (NSArray *)test5S5C {
  return test5S5CArray;
}
- (TestsTest5S_5C*)test5S5CAtIndex:(NSUInteger)index {
  return [test5S5CArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasAge) {
    [output writeUInt32:2 value:self.age];
  }
  [self.testArray enumerateObjectsUsingBlock:^(TestsTest *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:3 value:element];
  }];
  [self.test3GArray enumerateObjectsUsingBlock:^(TestsTest3G *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:4 value:element];
  }];
  [self.test3GsArray enumerateObjectsUsingBlock:^(TestsTest3GS *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:5 value:element];
  }];
  [self.test4Array enumerateObjectsUsingBlock:^(TestsTest4 *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:6 value:element];
  }];
  [self.test4SArray enumerateObjectsUsingBlock:^(TestsTest4S *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:7 value:element];
  }];
  [self.test5Array enumerateObjectsUsingBlock:^(TestsTest5 *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:8 value:element];
  }];
  [self.test5S5CArray enumerateObjectsUsingBlock:^(TestsTest5S_5C *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:9 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasAge) {
    size_ += computeUInt32Size(2, self.age);
  }
  [self.testArray enumerateObjectsUsingBlock:^(TestsTest *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(3, element);
  }];
  [self.test3GArray enumerateObjectsUsingBlock:^(TestsTest3G *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(4, element);
  }];
  [self.test3GsArray enumerateObjectsUsingBlock:^(TestsTest3GS *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(5, element);
  }];
  [self.test4Array enumerateObjectsUsingBlock:^(TestsTest4 *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(6, element);
  }];
  [self.test4SArray enumerateObjectsUsingBlock:^(TestsTest4S *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(7, element);
  }];
  [self.test5Array enumerateObjectsUsingBlock:^(TestsTest5 *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(8, element);
  }];
  [self.test5S5CArray enumerateObjectsUsingBlock:^(TestsTest5S_5C *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(9, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Tests*) parseFromData:(NSData*) data {
  return (Tests*)[[[Tests builder] mergeFromData:data] build];
}
+ (Tests*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Tests*)[[[Tests builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Tests*) parseFromInputStream:(NSInputStream*) input {
  return (Tests*)[[[Tests builder] mergeFromInputStream:input] build];
}
+ (Tests*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Tests*)[[[Tests builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Tests*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Tests*)[[[Tests builder] mergeFromCodedInputStream:input] build];
}
+ (Tests*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Tests*)[[[Tests builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsBuilder*) builder {
  return [[TestsBuilder alloc] init];
}
+ (TestsBuilder*) builderWithPrototype:(Tests*) prototype {
  return [[Tests builder] mergeFrom:prototype];
}
- (TestsBuilder*) builder {
  return [Tests builder];
}
- (TestsBuilder*) toBuilder {
  return [Tests builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"age", [NSNumber numberWithInteger:self.age]];
  }
  [self.testArray enumerateObjectsUsingBlock:^(TestsTest *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"test"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.test3GArray enumerateObjectsUsingBlock:^(TestsTest3G *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"test3G"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.test3GsArray enumerateObjectsUsingBlock:^(TestsTest3GS *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"test3Gs"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.test4Array enumerateObjectsUsingBlock:^(TestsTest4 *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"test4"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.test4SArray enumerateObjectsUsingBlock:^(TestsTest4S *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"test4S"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.test5Array enumerateObjectsUsingBlock:^(TestsTest5 *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"test5"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.test5S5CArray enumerateObjectsUsingBlock:^(TestsTest5S_5C *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"test5S5C"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Tests class]]) {
    return NO;
  }
  Tests *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAge == otherMessage.hasAge &&
      (!self.hasAge || self.age == otherMessage.age) &&
      [self.testArray isEqualToArray:otherMessage.testArray] &&
      [self.test3GArray isEqualToArray:otherMessage.test3GArray] &&
      [self.test3GsArray isEqualToArray:otherMessage.test3GsArray] &&
      [self.test4Array isEqualToArray:otherMessage.test4Array] &&
      [self.test4SArray isEqualToArray:otherMessage.test4SArray] &&
      [self.test5Array isEqualToArray:otherMessage.test5Array] &&
      [self.test5S5CArray isEqualToArray:otherMessage.test5S5CArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.age] hash];
  }
  [self.testArray enumerateObjectsUsingBlock:^(TestsTest *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.test3GArray enumerateObjectsUsingBlock:^(TestsTest3G *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.test3GsArray enumerateObjectsUsingBlock:^(TestsTest3GS *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.test4Array enumerateObjectsUsingBlock:^(TestsTest4 *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.test4SArray enumerateObjectsUsingBlock:^(TestsTest4S *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.test5Array enumerateObjectsUsingBlock:^(TestsTest5 *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  [self.test5S5CArray enumerateObjectsUsingBlock:^(TestsTest5S_5C *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestsTest ()
@property (strong) NSString* name;
@property UInt32 age;
@end

@implementation TestsTest

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) value_ {
  hasAge_ = !!value_;
}
@synthesize age;
- (void) dealloc {
  self.name = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.age = 0;
  }
  return self;
}
static TestsTest* defaultTestsTestInstance = nil;
+ (void) initialize {
  if (self == [TestsTest class]) {
    defaultTestsTestInstance = [[TestsTest alloc] init];
  }
}
+ (TestsTest*) defaultInstance {
  return defaultTestsTestInstance;
}
- (TestsTest*) defaultInstance {
  return defaultTestsTestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasAge) {
    [output writeUInt32:2 value:self.age];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasAge) {
    size_ += computeUInt32Size(2, self.age);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestsTest*) parseFromData:(NSData*) data {
  return (TestsTest*)[[[TestsTest builder] mergeFromData:data] build];
}
+ (TestsTest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest*)[[[TestsTest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestsTest*) parseFromInputStream:(NSInputStream*) input {
  return (TestsTest*)[[[TestsTest builder] mergeFromInputStream:input] build];
}
+ (TestsTest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest*)[[[TestsTest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestsTest*)[[[TestsTest builder] mergeFromCodedInputStream:input] build];
}
+ (TestsTest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest*)[[[TestsTest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTestBuilder*) builder {
  return [[TestsTestBuilder alloc] init];
}
+ (TestsTestBuilder*) builderWithPrototype:(TestsTest*) prototype {
  return [[TestsTest builder] mergeFrom:prototype];
}
- (TestsTestBuilder*) builder {
  return [TestsTest builder];
}
- (TestsTestBuilder*) toBuilder {
  return [TestsTest builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"age", [NSNumber numberWithInteger:self.age]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestsTest class]]) {
    return NO;
  }
  TestsTest *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAge == otherMessage.hasAge &&
      (!self.hasAge || self.age == otherMessage.age) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.age] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestsTestBuilder()
@property (strong) TestsTest* result;
@end

@implementation TestsTestBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[TestsTest alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TestsTestBuilder*) clear {
  self.result = [[TestsTest alloc] init];
  return self;
}
- (TestsTestBuilder*) clone {
  return [TestsTest builderWithPrototype:result];
}
- (TestsTest*) defaultInstance {
  return [TestsTest defaultInstance];
}
- (TestsTest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestsTest*) buildPartial {
  TestsTest* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TestsTestBuilder*) mergeFrom:(TestsTest*) other {
  if (other == [TestsTest defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestsTestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestsTestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setAge:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TestsTestBuilder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TestsTestBuilder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAge {
  return result.hasAge;
}
- (UInt32) age {
  return result.age;
}
- (TestsTestBuilder*) setAge:(UInt32) value {
  result.hasAge = YES;
  result.age = value;
  return self;
}
- (TestsTestBuilder*) clearAge {
  result.hasAge = NO;
  result.age = 0;
  return self;
}
@end

@interface TestsTest3G ()
@property (strong) NSString* name;
@property UInt32 age;
@end

@implementation TestsTest3G

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) value_ {
  hasAge_ = !!value_;
}
@synthesize age;
- (void) dealloc {
  self.name = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.age = 0;
  }
  return self;
}
static TestsTest3G* defaultTestsTest3GInstance = nil;
+ (void) initialize {
  if (self == [TestsTest3G class]) {
    defaultTestsTest3GInstance = [[TestsTest3G alloc] init];
  }
}
+ (TestsTest3G*) defaultInstance {
  return defaultTestsTest3GInstance;
}
- (TestsTest3G*) defaultInstance {
  return defaultTestsTest3GInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasAge) {
    [output writeUInt32:2 value:self.age];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasAge) {
    size_ += computeUInt32Size(2, self.age);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestsTest3G*) parseFromData:(NSData*) data {
  return (TestsTest3G*)[[[TestsTest3G builder] mergeFromData:data] build];
}
+ (TestsTest3G*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest3G*)[[[TestsTest3G builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestsTest3G*) parseFromInputStream:(NSInputStream*) input {
  return (TestsTest3G*)[[[TestsTest3G builder] mergeFromInputStream:input] build];
}
+ (TestsTest3G*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest3G*)[[[TestsTest3G builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest3G*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestsTest3G*)[[[TestsTest3G builder] mergeFromCodedInputStream:input] build];
}
+ (TestsTest3G*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest3G*)[[[TestsTest3G builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest3GBuilder*) builder {
  return [[TestsTest3GBuilder alloc] init];
}
+ (TestsTest3GBuilder*) builderWithPrototype:(TestsTest3G*) prototype {
  return [[TestsTest3G builder] mergeFrom:prototype];
}
- (TestsTest3GBuilder*) builder {
  return [TestsTest3G builder];
}
- (TestsTest3GBuilder*) toBuilder {
  return [TestsTest3G builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"age", [NSNumber numberWithInteger:self.age]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestsTest3G class]]) {
    return NO;
  }
  TestsTest3G *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAge == otherMessage.hasAge &&
      (!self.hasAge || self.age == otherMessage.age) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.age] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestsTest3GBuilder()
@property (strong) TestsTest3G* result;
@end

@implementation TestsTest3GBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[TestsTest3G alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TestsTest3GBuilder*) clear {
  self.result = [[TestsTest3G alloc] init];
  return self;
}
- (TestsTest3GBuilder*) clone {
  return [TestsTest3G builderWithPrototype:result];
}
- (TestsTest3G*) defaultInstance {
  return [TestsTest3G defaultInstance];
}
- (TestsTest3G*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestsTest3G*) buildPartial {
  TestsTest3G* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TestsTest3GBuilder*) mergeFrom:(TestsTest3G*) other {
  if (other == [TestsTest3G defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestsTest3GBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestsTest3GBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setAge:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TestsTest3GBuilder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TestsTest3GBuilder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAge {
  return result.hasAge;
}
- (UInt32) age {
  return result.age;
}
- (TestsTest3GBuilder*) setAge:(UInt32) value {
  result.hasAge = YES;
  result.age = value;
  return self;
}
- (TestsTest3GBuilder*) clearAge {
  result.hasAge = NO;
  result.age = 0;
  return self;
}
@end

@interface TestsTest3GS ()
@property (strong) NSString* name;
@property UInt32 age;
@end

@implementation TestsTest3GS

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) value_ {
  hasAge_ = !!value_;
}
@synthesize age;
- (void) dealloc {
  self.name = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.age = 0;
  }
  return self;
}
static TestsTest3GS* defaultTestsTest3GSInstance = nil;
+ (void) initialize {
  if (self == [TestsTest3GS class]) {
    defaultTestsTest3GSInstance = [[TestsTest3GS alloc] init];
  }
}
+ (TestsTest3GS*) defaultInstance {
  return defaultTestsTest3GSInstance;
}
- (TestsTest3GS*) defaultInstance {
  return defaultTestsTest3GSInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasAge) {
    [output writeUInt32:2 value:self.age];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasAge) {
    size_ += computeUInt32Size(2, self.age);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestsTest3GS*) parseFromData:(NSData*) data {
  return (TestsTest3GS*)[[[TestsTest3GS builder] mergeFromData:data] build];
}
+ (TestsTest3GS*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest3GS*)[[[TestsTest3GS builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestsTest3GS*) parseFromInputStream:(NSInputStream*) input {
  return (TestsTest3GS*)[[[TestsTest3GS builder] mergeFromInputStream:input] build];
}
+ (TestsTest3GS*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest3GS*)[[[TestsTest3GS builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest3GS*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestsTest3GS*)[[[TestsTest3GS builder] mergeFromCodedInputStream:input] build];
}
+ (TestsTest3GS*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest3GS*)[[[TestsTest3GS builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest3GSBuilder*) builder {
  return [[TestsTest3GSBuilder alloc] init];
}
+ (TestsTest3GSBuilder*) builderWithPrototype:(TestsTest3GS*) prototype {
  return [[TestsTest3GS builder] mergeFrom:prototype];
}
- (TestsTest3GSBuilder*) builder {
  return [TestsTest3GS builder];
}
- (TestsTest3GSBuilder*) toBuilder {
  return [TestsTest3GS builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"age", [NSNumber numberWithInteger:self.age]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestsTest3GS class]]) {
    return NO;
  }
  TestsTest3GS *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAge == otherMessage.hasAge &&
      (!self.hasAge || self.age == otherMessage.age) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.age] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestsTest3GSBuilder()
@property (strong) TestsTest3GS* result;
@end

@implementation TestsTest3GSBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[TestsTest3GS alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TestsTest3GSBuilder*) clear {
  self.result = [[TestsTest3GS alloc] init];
  return self;
}
- (TestsTest3GSBuilder*) clone {
  return [TestsTest3GS builderWithPrototype:result];
}
- (TestsTest3GS*) defaultInstance {
  return [TestsTest3GS defaultInstance];
}
- (TestsTest3GS*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestsTest3GS*) buildPartial {
  TestsTest3GS* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TestsTest3GSBuilder*) mergeFrom:(TestsTest3GS*) other {
  if (other == [TestsTest3GS defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestsTest3GSBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestsTest3GSBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setAge:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TestsTest3GSBuilder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TestsTest3GSBuilder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAge {
  return result.hasAge;
}
- (UInt32) age {
  return result.age;
}
- (TestsTest3GSBuilder*) setAge:(UInt32) value {
  result.hasAge = YES;
  result.age = value;
  return self;
}
- (TestsTest3GSBuilder*) clearAge {
  result.hasAge = NO;
  result.age = 0;
  return self;
}
@end

@interface TestsTest4 ()
@property (strong) NSString* name;
@property UInt32 age;
@end

@implementation TestsTest4

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) value_ {
  hasAge_ = !!value_;
}
@synthesize age;
- (void) dealloc {
  self.name = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.age = 0;
  }
  return self;
}
static TestsTest4* defaultTestsTest4Instance = nil;
+ (void) initialize {
  if (self == [TestsTest4 class]) {
    defaultTestsTest4Instance = [[TestsTest4 alloc] init];
  }
}
+ (TestsTest4*) defaultInstance {
  return defaultTestsTest4Instance;
}
- (TestsTest4*) defaultInstance {
  return defaultTestsTest4Instance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasAge) {
    [output writeUInt32:2 value:self.age];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasAge) {
    size_ += computeUInt32Size(2, self.age);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestsTest4*) parseFromData:(NSData*) data {
  return (TestsTest4*)[[[TestsTest4 builder] mergeFromData:data] build];
}
+ (TestsTest4*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest4*)[[[TestsTest4 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestsTest4*) parseFromInputStream:(NSInputStream*) input {
  return (TestsTest4*)[[[TestsTest4 builder] mergeFromInputStream:input] build];
}
+ (TestsTest4*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest4*)[[[TestsTest4 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest4*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestsTest4*)[[[TestsTest4 builder] mergeFromCodedInputStream:input] build];
}
+ (TestsTest4*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest4*)[[[TestsTest4 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest4Builder*) builder {
  return [[TestsTest4Builder alloc] init];
}
+ (TestsTest4Builder*) builderWithPrototype:(TestsTest4*) prototype {
  return [[TestsTest4 builder] mergeFrom:prototype];
}
- (TestsTest4Builder*) builder {
  return [TestsTest4 builder];
}
- (TestsTest4Builder*) toBuilder {
  return [TestsTest4 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"age", [NSNumber numberWithInteger:self.age]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestsTest4 class]]) {
    return NO;
  }
  TestsTest4 *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAge == otherMessage.hasAge &&
      (!self.hasAge || self.age == otherMessage.age) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.age] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestsTest4Builder()
@property (strong) TestsTest4* result;
@end

@implementation TestsTest4Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[TestsTest4 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TestsTest4Builder*) clear {
  self.result = [[TestsTest4 alloc] init];
  return self;
}
- (TestsTest4Builder*) clone {
  return [TestsTest4 builderWithPrototype:result];
}
- (TestsTest4*) defaultInstance {
  return [TestsTest4 defaultInstance];
}
- (TestsTest4*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestsTest4*) buildPartial {
  TestsTest4* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TestsTest4Builder*) mergeFrom:(TestsTest4*) other {
  if (other == [TestsTest4 defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestsTest4Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestsTest4Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setAge:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TestsTest4Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TestsTest4Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAge {
  return result.hasAge;
}
- (UInt32) age {
  return result.age;
}
- (TestsTest4Builder*) setAge:(UInt32) value {
  result.hasAge = YES;
  result.age = value;
  return self;
}
- (TestsTest4Builder*) clearAge {
  result.hasAge = NO;
  result.age = 0;
  return self;
}
@end

@interface TestsTest4S ()
@property (strong) NSString* name;
@property UInt32 age;
@end

@implementation TestsTest4S

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) value_ {
  hasAge_ = !!value_;
}
@synthesize age;
- (void) dealloc {
  self.name = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.age = 0;
  }
  return self;
}
static TestsTest4S* defaultTestsTest4SInstance = nil;
+ (void) initialize {
  if (self == [TestsTest4S class]) {
    defaultTestsTest4SInstance = [[TestsTest4S alloc] init];
  }
}
+ (TestsTest4S*) defaultInstance {
  return defaultTestsTest4SInstance;
}
- (TestsTest4S*) defaultInstance {
  return defaultTestsTest4SInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasAge) {
    [output writeUInt32:2 value:self.age];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasAge) {
    size_ += computeUInt32Size(2, self.age);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestsTest4S*) parseFromData:(NSData*) data {
  return (TestsTest4S*)[[[TestsTest4S builder] mergeFromData:data] build];
}
+ (TestsTest4S*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest4S*)[[[TestsTest4S builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestsTest4S*) parseFromInputStream:(NSInputStream*) input {
  return (TestsTest4S*)[[[TestsTest4S builder] mergeFromInputStream:input] build];
}
+ (TestsTest4S*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest4S*)[[[TestsTest4S builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest4S*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestsTest4S*)[[[TestsTest4S builder] mergeFromCodedInputStream:input] build];
}
+ (TestsTest4S*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest4S*)[[[TestsTest4S builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest4SBuilder*) builder {
  return [[TestsTest4SBuilder alloc] init];
}
+ (TestsTest4SBuilder*) builderWithPrototype:(TestsTest4S*) prototype {
  return [[TestsTest4S builder] mergeFrom:prototype];
}
- (TestsTest4SBuilder*) builder {
  return [TestsTest4S builder];
}
- (TestsTest4SBuilder*) toBuilder {
  return [TestsTest4S builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"age", [NSNumber numberWithInteger:self.age]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestsTest4S class]]) {
    return NO;
  }
  TestsTest4S *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAge == otherMessage.hasAge &&
      (!self.hasAge || self.age == otherMessage.age) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.age] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestsTest4SBuilder()
@property (strong) TestsTest4S* result;
@end

@implementation TestsTest4SBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[TestsTest4S alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TestsTest4SBuilder*) clear {
  self.result = [[TestsTest4S alloc] init];
  return self;
}
- (TestsTest4SBuilder*) clone {
  return [TestsTest4S builderWithPrototype:result];
}
- (TestsTest4S*) defaultInstance {
  return [TestsTest4S defaultInstance];
}
- (TestsTest4S*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestsTest4S*) buildPartial {
  TestsTest4S* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TestsTest4SBuilder*) mergeFrom:(TestsTest4S*) other {
  if (other == [TestsTest4S defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestsTest4SBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestsTest4SBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setAge:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TestsTest4SBuilder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TestsTest4SBuilder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAge {
  return result.hasAge;
}
- (UInt32) age {
  return result.age;
}
- (TestsTest4SBuilder*) setAge:(UInt32) value {
  result.hasAge = YES;
  result.age = value;
  return self;
}
- (TestsTest4SBuilder*) clearAge {
  result.hasAge = NO;
  result.age = 0;
  return self;
}
@end

@interface TestsTest5 ()
@property (strong) NSString* name;
@property UInt32 age;
@end

@implementation TestsTest5

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) value_ {
  hasAge_ = !!value_;
}
@synthesize age;
- (void) dealloc {
  self.name = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.age = 0;
  }
  return self;
}
static TestsTest5* defaultTestsTest5Instance = nil;
+ (void) initialize {
  if (self == [TestsTest5 class]) {
    defaultTestsTest5Instance = [[TestsTest5 alloc] init];
  }
}
+ (TestsTest5*) defaultInstance {
  return defaultTestsTest5Instance;
}
- (TestsTest5*) defaultInstance {
  return defaultTestsTest5Instance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasAge) {
    [output writeUInt32:2 value:self.age];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasAge) {
    size_ += computeUInt32Size(2, self.age);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestsTest5*) parseFromData:(NSData*) data {
  return (TestsTest5*)[[[TestsTest5 builder] mergeFromData:data] build];
}
+ (TestsTest5*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest5*)[[[TestsTest5 builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestsTest5*) parseFromInputStream:(NSInputStream*) input {
  return (TestsTest5*)[[[TestsTest5 builder] mergeFromInputStream:input] build];
}
+ (TestsTest5*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest5*)[[[TestsTest5 builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest5*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestsTest5*)[[[TestsTest5 builder] mergeFromCodedInputStream:input] build];
}
+ (TestsTest5*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest5*)[[[TestsTest5 builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest5Builder*) builder {
  return [[TestsTest5Builder alloc] init];
}
+ (TestsTest5Builder*) builderWithPrototype:(TestsTest5*) prototype {
  return [[TestsTest5 builder] mergeFrom:prototype];
}
- (TestsTest5Builder*) builder {
  return [TestsTest5 builder];
}
- (TestsTest5Builder*) toBuilder {
  return [TestsTest5 builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"age", [NSNumber numberWithInteger:self.age]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestsTest5 class]]) {
    return NO;
  }
  TestsTest5 *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAge == otherMessage.hasAge &&
      (!self.hasAge || self.age == otherMessage.age) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.age] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestsTest5Builder()
@property (strong) TestsTest5* result;
@end

@implementation TestsTest5Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[TestsTest5 alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TestsTest5Builder*) clear {
  self.result = [[TestsTest5 alloc] init];
  return self;
}
- (TestsTest5Builder*) clone {
  return [TestsTest5 builderWithPrototype:result];
}
- (TestsTest5*) defaultInstance {
  return [TestsTest5 defaultInstance];
}
- (TestsTest5*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestsTest5*) buildPartial {
  TestsTest5* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TestsTest5Builder*) mergeFrom:(TestsTest5*) other {
  if (other == [TestsTest5 defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestsTest5Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestsTest5Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setAge:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TestsTest5Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TestsTest5Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAge {
  return result.hasAge;
}
- (UInt32) age {
  return result.age;
}
- (TestsTest5Builder*) setAge:(UInt32) value {
  result.hasAge = YES;
  result.age = value;
  return self;
}
- (TestsTest5Builder*) clearAge {
  result.hasAge = NO;
  result.age = 0;
  return self;
}
@end

@interface TestsTest5S_5C ()
@property (strong) NSString* name;
@property UInt32 age;
@end

@implementation TestsTest5S_5C

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value_ {
  hasName_ = !!value_;
}
@synthesize name;
- (BOOL) hasAge {
  return !!hasAge_;
}
- (void) setHasAge:(BOOL) value_ {
  hasAge_ = !!value_;
}
@synthesize age;
- (void) dealloc {
  self.name = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.age = 0;
  }
  return self;
}
static TestsTest5S_5C* defaultTestsTest5S_5CInstance = nil;
+ (void) initialize {
  if (self == [TestsTest5S_5C class]) {
    defaultTestsTest5S_5CInstance = [[TestsTest5S_5C alloc] init];
  }
}
+ (TestsTest5S_5C*) defaultInstance {
  return defaultTestsTest5S_5CInstance;
}
- (TestsTest5S_5C*) defaultInstance {
  return defaultTestsTest5S_5CInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasAge) {
    [output writeUInt32:2 value:self.age];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasAge) {
    size_ += computeUInt32Size(2, self.age);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestsTest5S_5C*) parseFromData:(NSData*) data {
  return (TestsTest5S_5C*)[[[TestsTest5S_5C builder] mergeFromData:data] build];
}
+ (TestsTest5S_5C*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest5S_5C*)[[[TestsTest5S_5C builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestsTest5S_5C*) parseFromInputStream:(NSInputStream*) input {
  return (TestsTest5S_5C*)[[[TestsTest5S_5C builder] mergeFromInputStream:input] build];
}
+ (TestsTest5S_5C*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest5S_5C*)[[[TestsTest5S_5C builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest5S_5C*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestsTest5S_5C*)[[[TestsTest5S_5C builder] mergeFromCodedInputStream:input] build];
}
+ (TestsTest5S_5C*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestsTest5S_5C*)[[[TestsTest5S_5C builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestsTest5S_5CBuilder*) builder {
  return [[TestsTest5S_5CBuilder alloc] init];
}
+ (TestsTest5S_5CBuilder*) builderWithPrototype:(TestsTest5S_5C*) prototype {
  return [[TestsTest5S_5C builder] mergeFrom:prototype];
}
- (TestsTest5S_5CBuilder*) builder {
  return [TestsTest5S_5C builder];
}
- (TestsTest5S_5CBuilder*) toBuilder {
  return [TestsTest5S_5C builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasAge) {
    [output appendFormat:@"%@%@: %@\n", indent, @"age", [NSNumber numberWithInteger:self.age]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestsTest5S_5C class]]) {
    return NO;
  }
  TestsTest5S_5C *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasAge == otherMessage.hasAge &&
      (!self.hasAge || self.age == otherMessage.age) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasAge) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.age] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestsTest5S_5CBuilder()
@property (strong) TestsTest5S_5C* result;
@end

@implementation TestsTest5S_5CBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[TestsTest5S_5C alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TestsTest5S_5CBuilder*) clear {
  self.result = [[TestsTest5S_5C alloc] init];
  return self;
}
- (TestsTest5S_5CBuilder*) clone {
  return [TestsTest5S_5C builderWithPrototype:result];
}
- (TestsTest5S_5C*) defaultInstance {
  return [TestsTest5S_5C defaultInstance];
}
- (TestsTest5S_5C*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestsTest5S_5C*) buildPartial {
  TestsTest5S_5C* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TestsTest5S_5CBuilder*) mergeFrom:(TestsTest5S_5C*) other {
  if (other == [TestsTest5S_5C defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestsTest5S_5CBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestsTest5S_5CBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setAge:[input readUInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TestsTest5S_5CBuilder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TestsTest5S_5CBuilder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAge {
  return result.hasAge;
}
- (UInt32) age {
  return result.age;
}
- (TestsTest5S_5CBuilder*) setAge:(UInt32) value {
  result.hasAge = YES;
  result.age = value;
  return self;
}
- (TestsTest5S_5CBuilder*) clearAge {
  result.hasAge = NO;
  result.age = 0;
  return self;
}
@end

@interface TestsBuilder()
@property (strong) Tests* result;
@end

@implementation TestsBuilder
@synthesize result;
- (void) dealloc {
  self.result = nil;
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[Tests alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TestsBuilder*) clear {
  self.result = [[Tests alloc] init];
  return self;
}
- (TestsBuilder*) clone {
  return [Tests builderWithPrototype:result];
}
- (Tests*) defaultInstance {
  return [Tests defaultInstance];
}
- (Tests*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Tests*) buildPartial {
  Tests* returnMe = result;
  self.result = nil;
  return returnMe;
}
- (TestsBuilder*) mergeFrom:(Tests*) other {
  if (other == [Tests defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasAge) {
    [self setAge:other.age];
  }
  if (other.testArray.count > 0) {
    if (result.testArray == nil) {
      result.testArray = [[NSMutableArray alloc] initWithArray:other.testArray];
    } else {
      [result.testArray addObjectsFromArray:other.testArray];
    }
  }
  if (other.test3GArray.count > 0) {
    if (result.test3GArray == nil) {
      result.test3GArray = [[NSMutableArray alloc] initWithArray:other.test3GArray];
    } else {
      [result.test3GArray addObjectsFromArray:other.test3GArray];
    }
  }
  if (other.test3GsArray.count > 0) {
    if (result.test3GsArray == nil) {
      result.test3GsArray = [[NSMutableArray alloc] initWithArray:other.test3GsArray];
    } else {
      [result.test3GsArray addObjectsFromArray:other.test3GsArray];
    }
  }
  if (other.test4Array.count > 0) {
    if (result.test4Array == nil) {
      result.test4Array = [[NSMutableArray alloc] initWithArray:other.test4Array];
    } else {
      [result.test4Array addObjectsFromArray:other.test4Array];
    }
  }
  if (other.test4SArray.count > 0) {
    if (result.test4SArray == nil) {
      result.test4SArray = [[NSMutableArray alloc] initWithArray:other.test4SArray];
    } else {
      [result.test4SArray addObjectsFromArray:other.test4SArray];
    }
  }
  if (other.test5Array.count > 0) {
    if (result.test5Array == nil) {
      result.test5Array = [[NSMutableArray alloc] initWithArray:other.test5Array];
    } else {
      [result.test5Array addObjectsFromArray:other.test5Array];
    }
  }
  if (other.test5S5CArray.count > 0) {
    if (result.test5S5CArray == nil) {
      result.test5S5CArray = [[NSMutableArray alloc] initWithArray:other.test5S5CArray];
    } else {
      [result.test5S5CArray addObjectsFromArray:other.test5S5CArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestsBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 16: {
        [self setAge:[input readUInt32]];
        break;
      }
      case 26: {
        TestsTestBuilder* subBuilder = [TestsTest builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTest:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        TestsTest3GBuilder* subBuilder = [TestsTest3G builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTest3G:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        TestsTest3GSBuilder* subBuilder = [TestsTest3GS builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTest3Gs:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        TestsTest4Builder* subBuilder = [TestsTest4 builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTest4:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        TestsTest4SBuilder* subBuilder = [TestsTest4S builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTest4S:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        TestsTest5Builder* subBuilder = [TestsTest5 builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTest5:[subBuilder buildPartial]];
        break;
      }
      case 74: {
        TestsTest5S_5CBuilder* subBuilder = [TestsTest5S_5C builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addTest5S5C:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (TestsBuilder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (TestsBuilder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasAge {
  return result.hasAge;
}
- (UInt32) age {
  return result.age;
}
- (TestsBuilder*) setAge:(UInt32) value {
  result.hasAge = YES;
  result.age = value;
  return self;
}
- (TestsBuilder*) clearAge {
  result.hasAge = NO;
  result.age = 0;
  return self;
}
- (NSMutableArray *)test {
  return result.testArray;
}
- (TestsTest*)testAtIndex:(NSUInteger)index {
  return [result testAtIndex:index];
}
- (TestsBuilder *)addTest:(TestsTest*)value {
  if (result.testArray == nil) {
    result.testArray = [[NSMutableArray alloc]init];
  }
  [result.testArray addObject:value];
  return self;
}
- (TestsBuilder *)setTestArray:(NSArray *)array {
  result.testArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestsBuilder *)clearTest {
  result.testArray = nil;
  return self;
}
- (NSMutableArray *)test3G {
  return result.test3GArray;
}
- (TestsTest3G*)test3GAtIndex:(NSUInteger)index {
  return [result test3GAtIndex:index];
}
- (TestsBuilder *)addTest3G:(TestsTest3G*)value {
  if (result.test3GArray == nil) {
    result.test3GArray = [[NSMutableArray alloc]init];
  }
  [result.test3GArray addObject:value];
  return self;
}
- (TestsBuilder *)setTest3GArray:(NSArray *)array {
  result.test3GArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestsBuilder *)clearTest3G {
  result.test3GArray = nil;
  return self;
}
- (NSMutableArray *)test3Gs {
  return result.test3GsArray;
}
- (TestsTest3GS*)test3GsAtIndex:(NSUInteger)index {
  return [result test3GsAtIndex:index];
}
- (TestsBuilder *)addTest3Gs:(TestsTest3GS*)value {
  if (result.test3GsArray == nil) {
    result.test3GsArray = [[NSMutableArray alloc]init];
  }
  [result.test3GsArray addObject:value];
  return self;
}
- (TestsBuilder *)setTest3GsArray:(NSArray *)array {
  result.test3GsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestsBuilder *)clearTest3Gs {
  result.test3GsArray = nil;
  return self;
}
- (NSMutableArray *)test4 {
  return result.test4Array;
}
- (TestsTest4*)test4AtIndex:(NSUInteger)index {
  return [result test4AtIndex:index];
}
- (TestsBuilder *)addTest4:(TestsTest4*)value {
  if (result.test4Array == nil) {
    result.test4Array = [[NSMutableArray alloc]init];
  }
  [result.test4Array addObject:value];
  return self;
}
- (TestsBuilder *)setTest4Array:(NSArray *)array {
  result.test4Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestsBuilder *)clearTest4 {
  result.test4Array = nil;
  return self;
}
- (NSMutableArray *)test4S {
  return result.test4SArray;
}
- (TestsTest4S*)test4SAtIndex:(NSUInteger)index {
  return [result test4SAtIndex:index];
}
- (TestsBuilder *)addTest4S:(TestsTest4S*)value {
  if (result.test4SArray == nil) {
    result.test4SArray = [[NSMutableArray alloc]init];
  }
  [result.test4SArray addObject:value];
  return self;
}
- (TestsBuilder *)setTest4SArray:(NSArray *)array {
  result.test4SArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestsBuilder *)clearTest4S {
  result.test4SArray = nil;
  return self;
}
- (NSMutableArray *)test5 {
  return result.test5Array;
}
- (TestsTest5*)test5AtIndex:(NSUInteger)index {
  return [result test5AtIndex:index];
}
- (TestsBuilder *)addTest5:(TestsTest5*)value {
  if (result.test5Array == nil) {
    result.test5Array = [[NSMutableArray alloc]init];
  }
  [result.test5Array addObject:value];
  return self;
}
- (TestsBuilder *)setTest5Array:(NSArray *)array {
  result.test5Array = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestsBuilder *)clearTest5 {
  result.test5Array = nil;
  return self;
}
- (NSMutableArray *)test5S5C {
  return result.test5S5CArray;
}
- (TestsTest5S_5C*)test5S5CAtIndex:(NSUInteger)index {
  return [result test5S5CAtIndex:index];
}
- (TestsBuilder *)addTest5S5C:(TestsTest5S_5C*)value {
  if (result.test5S5CArray == nil) {
    result.test5S5CArray = [[NSMutableArray alloc]init];
  }
  [result.test5S5CArray addObject:value];
  return self;
}
- (TestsBuilder *)setTest5S5CArray:(NSArray *)array {
  result.test5S5CArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (TestsBuilder *)clearTest5S5C {
  result.test5S5CArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
